// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`typographyFormatter can handle dictionary with typography tokens 1`] = `
"/* Test header */

import SwiftUI

public extension Font {
  /// Namespace to prevent naming collisions with static accessors on
  /// SwiftUI's Font.
  ///
  /// Xcode's autocomplete allows for easy discovery of design system fonts.
  /// At any call site that requires a font, type \`Font.DesignSystem.<esc>\`
  /// TODO: Implement custom typefaces support.
  /// TODO: Impelment \`paragraphSpacing\`, \`textDecoration\`, and \`textCase\` support.
  struct DesignSystem {
      /// Please, use \`-1.5\` leading with this font.
      public static let H1 = Font.systemFont(
        size: 96,
        weightName: \\"Light\\"
      )
      /// Please, use \`-0.5\` leading with this font.
      public static let H2 = Font.systemFont(
        size: 60,
        weightName: \\"Light\\"
      )
  }

  private static func systemFont(size: CGFloat = 16, weightName: String = \\"Regular\\") -> Font {
      return system(size: size).weight(weightName.asFontWeight())
  }
}

private extension String {
  /// Matches string with \`Font.Weight\` constant.
  func asFontWeight() -> Font.Weight {
      guard let font = Font.Weight.all[lowercased()] else {
          assertionFailure(\\"Unknown font weight name: \\\\(self)\\")
          return .regular
      }
      return font
  }
}

private extension Font.Weight {
  /// Returns name to font weight contstant mapping.
  static var all: [String: Font.Weight] {
      [
          \\"ultralight\\": .ultraLight,
          \\"thin\\": .thin,
          \\"light\\": .light,
          \\"regular\\": .regular,
          \\"medium\\": .medium,
          \\"semibold\\": .semibold,
          \\"bold\\": .bold,
          \\"heavy\\": .heavy,
          \\"black\\": .black
      ]
  }
}"
`;
