<%= header %>

import SwiftUI

public extension Color {
  /// Namespace to prevent naming collisions with static accessors on
  /// SwiftUI's Color.
  ///
  /// Xcode's autocomplete allows for easy discovery of design system colors.
  /// At any call site that requires a color, type `Color.DesignSystem.<esc>`
  struct <%= themeName %> {
    <%_ for (const { name, value } of colors) { _%>
    public static let <%= name %> = Color(hex: 0x<%= value %>)
    <%_ } _%>
  }

  /// Initializer for hex-colors.
  /// - Parameter hex: color value.
  private init(hex: Int) {
    self.init(UIColor(hex))
  }
}

private extension UIColor {
  convenience init(_ rgbValue: Int) {
      self.init(
          red: CGFloat((Float((rgbValue & 0xff000000) >> 24)) / 255.0),
          green: CGFloat((Float((rgbValue & 0x00ff0000) >> 16)) / 255.0),
          blue: CGFloat((Float((rgbValue & 0x0000ff00) >> 8)) / 255.0),
          alpha: CGFloat((Float((rgbValue & 0x000000ff) >> 0)) / 255.0))
  }
}